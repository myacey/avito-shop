// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/myacey/avito-shop/internal/models"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AuthorizeUser mocks base method.
func (m *MockInterface) AuthorizeUser(c context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeUser", c, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeUser indicates an expected call of AuthorizeUser.
func (mr *MockInterfaceMockRecorder) AuthorizeUser(c, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeUser", reflect.TypeOf((*MockInterface)(nil).AuthorizeUser), c, username, password)
}

// BuyItem mocks base method.
func (m *MockInterface) BuyItem(c context.Context, username, itemName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", c, username, itemName)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockInterfaceMockRecorder) BuyItem(c, username, itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockInterface)(nil).BuyItem), c, username, itemName)
}

// CheckAuthToken mocks base method.
func (m *MockInterface) CheckAuthToken(c context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthToken", c, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthToken indicates an expected call of CheckAuthToken.
func (mr *MockInterfaceMockRecorder) CheckAuthToken(c, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthToken", reflect.TypeOf((*MockInterface)(nil).CheckAuthToken), c, token)
}

// GetFullUserInfo mocks base method.
func (m *MockInterface) GetFullUserInfo(c context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullUserInfo", c, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullUserInfo indicates an expected call of GetFullUserInfo.
func (mr *MockInterfaceMockRecorder) GetFullUserInfo(c, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullUserInfo", reflect.TypeOf((*MockInterface)(nil).GetFullUserInfo), c, username)
}

// SendCoin mocks base method.
func (m *MockInterface) SendCoin(c context.Context, fromUsername, toUsername string, amount int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoin", c, fromUsername, toUsername, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoin indicates an expected call of SendCoin.
func (mr *MockInterfaceMockRecorder) SendCoin(c, fromUsername, toUsername, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoin", reflect.TypeOf((*MockInterface)(nil).SendCoin), c, fromUsername, toUsername, amount)
}
