// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/store_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/myacey/avito-shop/db/sqlc"
)

// MockStoreRepository is a mock of StoreRepository interface.
type MockStoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStoreRepositoryMockRecorder
}

// MockStoreRepositoryMockRecorder is the mock recorder for MockStoreRepository.
type MockStoreRepositoryMockRecorder struct {
	mock *MockStoreRepository
}

// NewMockStoreRepository creates a new mock instance.
func NewMockStoreRepository(ctrl *gomock.Controller) *MockStoreRepository {
	mock := &MockStoreRepository{ctrl: ctrl}
	mock.recorder = &MockStoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreRepository) EXPECT() *MockStoreRepositoryMockRecorder {
	return m.recorder
}

// GetItemInfo mocks base method.
func (m *MockStoreRepository) GetItemInfo(c context.Context, itemName string) (*db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemInfo", c, itemName)
	ret0, _ := ret[0].(*db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemInfo indicates an expected call of GetItemInfo.
func (mr *MockStoreRepositoryMockRecorder) GetItemInfo(c, itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemInfo", reflect.TypeOf((*MockStoreRepository)(nil).GetItemInfo), c, itemName)
}
