// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/transfer_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/myacey/avito-shop/db/sqlc"
)

// MockTransferRepository is a mock of TransferRepository interface.
type MockTransferRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRepositoryMockRecorder
}

// MockTransferRepositoryMockRecorder is the mock recorder for MockTransferRepository.
type MockTransferRepositoryMockRecorder struct {
	mock *MockTransferRepository
}

// NewMockTransferRepository creates a new mock instance.
func NewMockTransferRepository(ctrl *gomock.Controller) *MockTransferRepository {
	mock := &MockTransferRepository{ctrl: ctrl}
	mock.recorder = &MockTransferRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRepository) EXPECT() *MockTransferRepositoryMockRecorder {
	return m.recorder
}

// CreateMoneyTransfer mocks base method.
func (m *MockTransferRepository) CreateMoneyTransfer(c context.Context, fromUsername, toUsername string, amount int32) (*db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMoneyTransfer", c, fromUsername, toUsername, amount)
	ret0, _ := ret[0].(*db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMoneyTransfer indicates an expected call of CreateMoneyTransfer.
func (mr *MockTransferRepositoryMockRecorder) CreateMoneyTransfer(c, fromUsername, toUsername, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoneyTransfer", reflect.TypeOf((*MockTransferRepository)(nil).CreateMoneyTransfer), c, fromUsername, toUsername, amount)
}

// GetTransfersWithUser mocks base method.
func (m *MockTransferRepository) GetTransfersWithUser(c context.Context, username string) ([]*db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersWithUser", c, username)
	ret0, _ := ret[0].([]*db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersWithUser indicates an expected call of GetTransfersWithUser.
func (mr *MockTransferRepositoryMockRecorder) GetTransfersWithUser(c, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersWithUser", reflect.TypeOf((*MockTransferRepository)(nil).GetTransfersWithUser), c, username)
}
