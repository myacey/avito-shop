// Code generated by MockGen. DO NOT EDIT.
// Source: db/sqlc/querier.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/myacey/avito-shop/db/sqlc"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockQuerier) BuyItem(ctx context.Context, arg db.BuyItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockQuerierMockRecorder) BuyItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockQuerier)(nil).BuyItem), ctx, arg)
}

// CreateMoneyTransfer mocks base method.
func (m *MockQuerier) CreateMoneyTransfer(ctx context.Context, arg db.CreateMoneyTransferParams) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMoneyTransfer", ctx, arg)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMoneyTransfer indicates an expected call of CreateMoneyTransfer.
func (mr *MockQuerierMockRecorder) CreateMoneyTransfer(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoneyTransfer", reflect.TypeOf((*MockQuerier)(nil).CreateMoneyTransfer), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// GetInventory mocks base method.
func (m *MockQuerier) GetInventory(ctx context.Context, userID int32) ([]db.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", ctx, userID)
	ret0, _ := ret[0].([]db.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockQuerierMockRecorder) GetInventory(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockQuerier)(nil).GetInventory), ctx, userID)
}

// GetItemFromStore mocks base method.
func (m *MockQuerier) GetItemFromStore(ctx context.Context, itemType string) (db.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemFromStore", ctx, itemType)
	ret0, _ := ret[0].(db.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemFromStore indicates an expected call of GetItemFromStore.
func (mr *MockQuerierMockRecorder) GetItemFromStore(ctx, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemFromStore", reflect.TypeOf((*MockQuerier)(nil).GetItemFromStore), ctx, itemType)
}

// GetTransfersWithUser mocks base method.
func (m *MockQuerier) GetTransfersWithUser(ctx context.Context, username string) ([]db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersWithUser", ctx, username)
	ret0, _ := ret[0].([]db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersWithUser indicates an expected call of GetTransfersWithUser.
func (mr *MockQuerierMockRecorder) GetTransfersWithUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersWithUser", reflect.TypeOf((*MockQuerier)(nil).GetTransfersWithUser), ctx, username)
}

// GetUser mocks base method.
func (m *MockQuerier) GetUser(ctx context.Context, username string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockQuerierMockRecorder) GetUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQuerier)(nil).GetUser), ctx, username)
}

// GetUserForUpdate mocks base method.
func (m *MockQuerier) GetUserForUpdate(ctx context.Context, username string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserForUpdate", ctx, username)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserForUpdate indicates an expected call of GetUserForUpdate.
func (mr *MockQuerierMockRecorder) GetUserForUpdate(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserForUpdate", reflect.TypeOf((*MockQuerier)(nil).GetUserForUpdate), ctx, username)
}

// GetUserViaID mocks base method.
func (m *MockQuerier) GetUserViaID(ctx context.Context, userID int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserViaID", ctx, userID)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserViaID indicates an expected call of GetUserViaID.
func (mr *MockQuerierMockRecorder) GetUserViaID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserViaID", reflect.TypeOf((*MockQuerier)(nil).GetUserViaID), ctx, userID)
}

// UpdateTwoUsersBalance mocks base method.
func (m *MockQuerier) UpdateTwoUsersBalance(ctx context.Context, arg db.UpdateTwoUsersBalanceParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTwoUsersBalance", ctx, arg)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTwoUsersBalance indicates an expected call of UpdateTwoUsersBalance.
func (mr *MockQuerierMockRecorder) UpdateTwoUsersBalance(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTwoUsersBalance", reflect.TypeOf((*MockQuerier)(nil).UpdateTwoUsersBalance), ctx, arg)
}

// UpdateUserBalance mocks base method.
func (m *MockQuerier) UpdateUserBalance(ctx context.Context, arg db.UpdateUserBalanceParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockQuerierMockRecorder) UpdateUserBalance(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockQuerier)(nil).UpdateUserBalance), ctx, arg)
}
