services:
  postgres:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - backend-net
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  migrate:
    image: migrate/migrate
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
        - backend-net
    volumes:
        - ./db//migration/:/migrations
    command: ["-path", "/migrations", "-database", "postgresql://root:password@postgres:5432/shop?sslmode=disable", "up"]
    links:
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
  
  redis:
    image: redis:alpine
    environment:
      - REDIS_USER
      - REDIS_PASSWORD=""
      - REDIS_USER_PASSWORD=""
      - REDIS_DATABASE=0
    # volumes:
    #   - redis_data:/data
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $DB_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$DB_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    ports:
      - "6379:6379" 
    networks:
      - backend-net
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "4.0" # 4 CPU
          memory: 2G
        reservations:
          cpus: "2.0"
          memory: 1G
  
  avito-shop:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - STATUS=${STATUS}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend-net

networks:
  backend-net:
    driver: bridge