// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO Users (
    username,
    password
) VALUES (
    $1, $2
) RETURNING user_id, username, password, coins
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Coins,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, password, coins FROM Users
WHERE username = $1
LIMIT 1 FOR SHARE
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Coins,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT user_id, username, password, coins FROM Users
WHERE username = $1
LIMIT 1
FOR UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Coins,
	)
	return i, err
}

const getUserViaID = `-- name: GetUserViaID :one
SELECT user_id, username, password, coins FROM Users
WHERE user_id = $1
LIMIT 1 FOR SHARE
`

func (q *Queries) GetUserViaID(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserViaID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Coins,
	)
	return i, err
}

const updateTwoUsersBalance = `-- name: UpdateTwoUsersBalance :many
UPDATE Users
SET coins = CASE 
    WHEN username = $2 THEN coins - $1
    WHEN username = $3 THEN coins + $1
END
WHERE USERNAME IN ($2, $3)
RETURNING user_id, username, password, coins
`

type UpdateTwoUsersBalanceParams struct {
	Coins        int32  `json:"coins"`
	FromUsername string `json:"from_username"`
	ToUsername   string `json:"to_username"`
}

func (q *Queries) UpdateTwoUsersBalance(ctx context.Context, arg UpdateTwoUsersBalanceParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, updateTwoUsersBalance, arg.Coins, arg.FromUsername, arg.ToUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Password,
			&i.Coins,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserBalance = `-- name: UpdateUserBalance :one
UPDATE Users
SET coins = $2
WHERE user_id = $1
RETURNING user_id, username, password, coins
`

type UpdateUserBalanceParams struct {
	UserID int32 `json:"user_id"`
	Coins  int32 `json:"coins"`
}

func (q *Queries) UpdateUserBalance(ctx context.Context, arg UpdateUserBalanceParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserBalance, arg.UserID, arg.Coins)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Coins,
	)
	return i, err
}
